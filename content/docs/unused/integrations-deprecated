---
title: Integrations
isDraft: true
redirectFrom:
  - /docs/cloud/integrations-deprecated
---

Neon supports the standard Postgres wire protocol. You can use all the normal client utilities like ‘psql’ and ‘pg_dump’, and standard client libraries and drivers to connect.

There are two ways to authenticate:

- using github single-sign-on, or
- using an authentication token

Github single-sign-on makes it very easy to connect interactively. However, as it requires opening a link with a web browser, it is not suitable for applications. For applications, generate an authentication token in the Cloud Console.

{/_### Using from Vercel_/}

### Using from Hasura

Hasura is a cloud-based GraphQL provider for existing databases. This guide will cover zero-coding integration between Neon cloud service and Hasura Cloud. By the end of this guide, you will have a working HTTP API endpoint that uses GraphQL to query a serverless database and responds with a set of rows.

First, set up a Neon project:

1. Go to the Neon Console <https://console.neon.tech/app/projects>.
2. Create a new Project or choose any existing one.
3. Open the Project page and click the 'Generate token' button.
4. Copy DATABASE_URL. We will need it later.

Second, add this Project as a data source in the Hasura Cloud project:

1. Go to the Hasura Cloud projects list <https://cloud.hasura.io/projects>.
2. Create a new project or launch a console for an existing one.
3. Go to the DATA section, and in the 'Connect Existing Database' tab, paste DATABASE_URL into the corresponding form field. Give it some name and click connect.

That is mostly it! Hasura Cloud will connect and automatically
discover the public schema. Neon will spin up a new compute node for
your database when a new connection arrives, and suspend it when it
becomes idle.

Now we can create the first table using the Hasura Console web
interface. Let it be table 't' with a single column 'text' of a type
'Text'. After the table is created, you can insert some rows into it, and finally
navigate to the API section for endpoint creation. In the GraphQL tab,
we can query our table with GraphQL, for example:

```graphql
query MyQuery {
  t {
    text
  }
}
```

Save this GraphQL query as an HTTP API endpoint by clicking the REST tab. Let us call the endpoint 'query_t'.

Finally, you can use this endpoint to get the table content now. For example, that is how it works from the shell:

```bash
$ curl -H 'x-hasura-admin-secret: {admin_secret}' https://{your_project_name}.hasura.app/api/rest/query_t
{"t":[{"text":"test"}]}
```

Thanks for your time, and keep hacking!

### Using with Prisma

Prisma is an open-source type-safe ORM for the javascript ecosystem. It consists of the following parts:

- Prisma Client: Auto-generated and type-safe query builder for Node.js & TypeScript
- Prisma Migrate: Migration tool to easily evolve your database schema from prototyping to production
- Prisma Studio: GUI to view and edit data in your database

This document discusses the concepts behind using Prisma with Neon for development and production setups.

#### Connecting to Neon from Prisma

To connect a Prisma-based app to Neon you need to specify a `postgresql` datasource and connection string.

First, add the following to the `prisma/schema.prisma`:

```typescript
datasource db {
  provider = "postgresql"
  url   = env("DATABASE_URL")
}
```

Then, go to the Project dashboard in Neon and generate a connection string in the `Connection Details` widget. You can add this connection string in `.env`:

```shell shouldWrap
DATABASE_URL=postgresql://[user]:[password]@[neon_hostname]/[dbname]
```

#### Using Neon for development with Prisma

Prisma uses a so-called shadow database to detect schema drift. Therefore, you need to have a second database to perform `prisma migrate dev` command. One way to deal with it is to create a separate Project in Neon and specify it via `shadowDatabaseUrl` in `prisma/schema.prisma`.

For example, you can configure Prisma in the following way:

in `prisma/schema.prisma`:

```typescript
datasource db {
  provider = "postgresql"
  url   = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}
```

and in `.env`:

```shell
DATABASE_URL="<connection string to the project1>"
SHADOW_DATABASE_URL="<connection string to the project2>"
```

### Using from Django

Django is one of the most popular Python backend frameworks. Django has built-in support for Postgres, so you only need to fill in the correct connection details. To use Neon with Django, you have create a Project on Neon and fill in the project connection settings in your settings.py in the same way as for a standalone Postgres server.

See the following example of specifying connection properties for Neon:

```django
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': '<your project id>',
        'USER': '<your github nickname from account used to authenticate in neon>,
        'PASSWORD': '<token generated in "Connection Details" tab>',
        'HOST': '<your project id>.cloud.neon.tech',
        'PORT': '5432',
    }
}
```

Note:

Currently, it is not possible to run Django tests against Neon because Django test runner needs to create a new database for tests which is currently not supported in Neon.

References:

- [Django Settings: Databases](https://docs.djangoproject.com/en/4.0/ref/settings/#databases)

### Using from SQLAlchemy

SQLAlchemy is among the most popular ORMs in the Python universe. To use SQLAlchemy with a Postgres database hosted on Neon, you only need to fill in the correct connection details.

Prerequisites:

Here we assume that you have already created a project on Neon, and have SQLAlchemy installed with a Postgres driver (this example assumes psycopg2 - the default one for Postgres in SQLAlchemy). For installation details see corresponding pages for [SQLAlchemy](https://docs.sqlalchemy.org/en/14/intro.html#installation) and [psycopg2](https://www.psycopg.org/docs/install.html).

SQLALchemy uses Engine abstraction to manage database connections and exposes a `create_engine` function as the primary endpoint for engine initialization. See the following example on how to create an SQLAlchemy engine pointing to the Neon Project.

```python
from sqlalchemy import create_engine

USERNAME = # Your GitHub username
TOKEN = # Token generated in "Connection Details" tab
DBNAME = # Name of your project
CONNSTR = f'postgresql://{USERNAME}:{TOKEN}@pg.neon.tech/{DBNAME}'

engine = create_engine(CONNSTR)
```

References:

- [Establishing Connectivity - the Engine](https://docs.sqlalchemy.org/en/14/tutorial/engine.html)
- [Connecting to PostgreSQL with SQLAlchemy](https://docs.sqlalchemy.org/en/14/core/engines.html#postgresql)

### Using from python + psycopg2

Psycopg2 is the most popular python library for running raw postgres queries. If you’re interested in a higher-level ORM on top of psycopg2, see our guides on [SQLAlchemy](#using-from-sqlalchemy) and [Django](#using-from-django).

To get started writing postgres queries against neon via psycopg2:

1. Register on Neon cloud service and create a project
2. Navigate to your Project on console.neon.tech and find the Postgres Username and access token in the “Connection Details” section.
3. Install psycopg2. You might also need psycopg2-binary depending on your system. You can run “pip install psycopg2 psycopg2-binary” or use a dependency manager like poetry to do the same.
4. Run the “hello neon” program:

```python
import psycopg2

# Optional: tell psycopg2 to cancel the query on Ctrl-C
import psycopg2.extras; psycopg2.extensions.set_wait_callback(psycopg2.extras.wait_select)

# NOTE: the password can be set to None if it's specified in the ~/.pgpass file
USERNAME = "<your-username>"
ACCESS_TOKEN = "<your-access-token>"
PORT = "5432"
HOST = "<your project name>.cloud.neon.tech"
DBNAME = "neondb"

conn = psycopg2.connect(
 host=HOST,
 port=PORT,
 user=USERNAME,
 password=ACCESS_TOKEN,
 database=DBNAME)

with conn.cursor() as cur:
 cur.execute("SELECT 'hello neon';")
 print(cur.fetchall())
```

5. Build great things with Neon! Any postgres tutorial will be able to guide you on the syntax.

Note: This example was tested with python 3 and psycopg2 version 2.9.3

### Using from Node.js

1. Add a postgres client to your project. In this example we use [postgres.js](https://www.npmjs.com/package/postgres).
2. Store your Neon credentials somewhere, for example in the `.env` file.

```shell
    NEON_HOST=...
    NEON_DB=...
    NEON_USER=...
    NEON_PASS=...
    NEON_PORT=...` \
```

3. Add the following code to `pages/api/hello_worlds.js`

```javascript
import postgres from 'postgres';

const sql = postgres({
  host: process.env.NEON_HOST,
  port: process.env.NEON_PORT,
  database: process.env.NEON_DB,
  username: process.env.NEON_USER,
  password: process.env.NEON_PASS,
});

const result = await sql.uafe(req.body);
```

### Using from Next.js + vercel

1. [Create a next.js project](https://nextjs.org/docs/app/getting-started/installation) if you don’t have one.
2. Create a Neon project for your app. You can configure your db schema from Neon Console or using tools like Prisma.
3. Add postgres client to your app. In this example we use [postgres.js](https://www.npmjs.com/package/postgres).
4. Put your Neon credentials to the `.env` file:

```shell
NEON_HOST=...
NEON_DB=...
NEON_USER=...
NEON_PASS=...
NEON_PORT=...
```

You can use either a connection string or connection options separately.

5. Connect to the database with postgres client and your Neon credentials from your api handlers or server functions:

```javascript pages/api/hello_worlds.js
import postgres from 'postgres';

const sql = postgres({
  host: process.env.NEON_HOST,
  port: process.env.NEON_PORT,
  database: process.env.NEON_DB,
  username: process.env.NEON_USER,
  password: process.env.NEON_PASS,
});

const result = await sql.uafe(req.body);
```

Do not ever expose your Neon credentials to the browser.

You can also use Prisma to manage your database, check our how-to [here](#using-with-prisma).

### Using from Symfony

Symfony is a framework for building web applications in PHP. Symfony uses Doctrine library to access databases.

First, obtain secret token from “Connection details” panel:

1. Select Project you wish to use in the UI. Click on it.
2. Click “Generate token” link.
3. Substitute token placeholder below with this token.

For example, if you configure your Symfony project with `.env` file, then DATABASE_URL entry in `.env` file should look like this:

```shell
# cat .env | grep DATABASE_URL
DATABASE_URL="postgresql://<user>:<token>@<project_id>.cloud.neon.tech:5432/neondb?charset=utf8"
```

Make sure that you are using `<user>%40neon` as username. This is url encoded value for `<user>`. You can find `<user>` string in the upper right corner of the UI.

### Using from Java Ecosystem

#### Connect with JDBC

The JDBC API is a Java API for relational databases. Postgres has a well-supported open-source JDBC driver, which can be used to access Neon. All popular Java frameworks use JDBC internally, so the only thing you need to do is use a correct connection URL.

To get a JDBC connection URL, replace placeholders with your credentials in the following template:

```java
jdbc:postgresql://<project>.cloud.neon.tech/neondb?user=<user>&password=<token>
```

For more information about JDBC, refer to the standard JDBC API documentation and [PostgreSQL JDBC Driver documentation](https://jdbc.postgresql.org/documentation/head/index.html).

#### Using from Spring Data

Spring relies on JDBC and Postgres driver to connect to Postgres databases. If you are starting your project with Spring Initializr, do not forget to add **PostgreSQL Driver** as a dependency. If you have an existing project, ensure driver dependency is installed.

The only configuration required for connection is a datasource URL. It is specified in the `application.properties` file in the following format:

```java
spring.datasource.url=jdbc:postgresql://<project>.cloud.neon.tech/neondb?user=<user>&password=<token>
```

### Using from Go

Neon is fully compatible with sql/db package and common Postgres drivers ie. lib/pq, pgx etc.

```go
package main

import (
    "database/sql"
    "fmt"
    "log"

    _ "github.com/lib/pq"
)

func main() {
    connStr := "user=<user> password=<token> dbname=neondb host=<project>.cloud.neon.tech"
    db, err := sql.Open("postgres", connStr)
    if err != nil {
        log.Fatal(err)
    }
    defer db.Close()

    rows, err := db.Query("select version()")
    if err != nil {
        log.Fatal(err)
    }
    defer rows.Close()

    var version string
    for rows.Next() {
        err := rows.Scan(&version)
        if err != nil {
            log.Fatal(err)
        }
    }
    fmt.Printf("version=%s\n", version)
}
```

[On golang playground](https://play.golang.com/p/gl69dT0HtHN)

### Using from Rust

```rust
use postgres::{Client, NoTls};

fn main() {
 let mut client = Client::connect("user=<user name> dbname=<db name> host=<project_id>.cloud.neon.tech password=<password>", NoTls).expect("connection error");

 for row in client.query("select version()", &[]).expect("query error") {
     let version: &str = row.get(0);
     println!("version: {}", version);
 }
}
```

[On rust-lang playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=afc8218d0764a11dd9097a76b0f8da86)
