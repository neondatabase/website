---
title: Concepts
isDraft: true
redirectFrom:
  - /docs/cloud/concepts-deprecated
---

## Neon User

A Neon user is identified by their email address.

A user registers and authenticates in Neon Web UI with their email, GitHub, Google, or partner account.

After authenticating, a user can create and access [Projects](#project) and [query Project data](/docs/get-started-with-neon/tutorials#query-via-ui). You can also manage [Postgres Users](#postgres-users) and [Databases](#postgres-databases) in each Project.

### Using API keys

API keys allow users to access Neon application programming interface.

An API key provides access to any action available to the user. Currently, API keys cannot be scoped to the specific Projects. Neon users can provision multiple API keys. An API key that is no longer needed can be revoked; this action cannot be reverted. Any issued API key is valid forever until it is revoked.

Check out the [API Reference](/api-reference) for more information about using the API keys and available API methods.

## Project

A Project is a collection of Postgres databases, Postgres users and other settings on Neon cloud service.

A Project contains a virtual instance with a Postgres server, also called Compute, as well as the storage used to store the Project data. The amount of virtual resources available for the Project is subject to limits defined by the [Technical Preview Free Plan](#free-plan).

Compute is stateless and can be automatically activated and suspended due to user activity.

## Compute Lifecycle

A Compute node in Neon is a stateless Postgres process due to the separation of storage and compute. It has two main states: Active and Idle.

Active means that Postgres is running currently. If there are no active queries for 5 minutes, the activity monitor will gracefully put the corresponding compute node into the Idle state to minimize compute usage. The activity monitor is conservative, and it treats 'idle in transaction' connections as some activities to avoid breaking an application logic that relies on long-lasting transactions. Yet, it closes all 'idle' connections after 5 minutes of complete inactivity.

You can connect to your compute at any time if it is Idle. Neon will automatically activate it. Activation usually happens within a few seconds, so the first connection in the Idle state will have higher latency. Also, the Postgres page cache (shared buffers) will be cold after waking up from Idle state, and your usual queries may take longer.

After some period in the Idle state, Neon will start occasionally activating your Compute to check data availability. The checks period will gradually increase up to several days if the Compute does not receive any client connections.

You can check all Compute state transitions in the Operations List widget on the Project dashboard.

## Postgres Users

Postgres users are created as a part of your Neon Project and can be managed via the Neon web UI. A system user `web-access` is used for the SQL Editor in Neon UI and for link authentication for psql. This user cannot be removed or used for authenticating in other scenarios.

The second user is created for client access. The credentials for that user can be managed, this user's credentials can be used for password-based psql authentication too.

More Postgres users can be created in Neon UI.

## Postgres Databases

When a Project is created, a ready-to-use database for storing data is created along with it, the name of the database is "main". A Neon user can create more databases inside a Project in the Neon UI. Neon users cannot manipulate system databases, such as `postgres`, `template0`, or `template1`.

## Limits

Neon gives you no cost access to the Postgres databases within the Technical Preview Free Plan limits.

| Limit                                                 | Value  |
| ----------------------------------------------------- | ------ |
| Max Projects per Neon User                            | 3      |
| Max size of a Project                                 | 10 GiB  |
| Max Number of processor cores for Compute per Project | 1vCPU  |
| Max RAM per Compute in Project                        | 256 MB |

See detailed explanation in chapters below.
If you need to upgrade resource limits, contact technical support.

To monitor current resource usage, check the Project Dashboard.

## Data Size

Neon separates storage and compute and stores data in its own internal format.
Data Size limit applies to the logical size of the Project. The logical size is the sum of all relation sizes in the Project.

If you are familiar with PostgreSQL, the logical size is roughly equal to

```sql
select pg_size_pretty(sum(pg_database_size(datname)))
from pg_database;
```

To check the logical size run the following query:

```sql
select pg_size_pretty(neon.pg_cluster_size());
```

When the limit is reached, you will see the PostgreSQL error message:

```text
could not extend file because cluster size limit (10240 MB)
has been exceeded
```

## Point in Time Reset

Neon storage consumes extra space in order to support Point in Time Reset (PITR) and the ability to reset a branch to a historical state. The historical data is stored in log based format.

Neon has limits on the amount of modification history stored for the [Technical Preview Free Plan](#free-plan) customers.

## Compute Config

During the Technical Preview, Neon only supports modification to session level configuration parameters. Parameters are reset when the session is terminated (e.g. when compute is suspended).

See [Default Parameters](/docs/compatibility#default-parameters).

See [https://www.postgresql.org/docs/14/runtime-config.html](https://www.postgresql.org/docs/14/runtime-config.html) for details.

## Technical Preview Free Plan

Neon cloud service is available for free during the [Limited and the Technical Preview](/docs/roadmap).

Technical Preview Free Plan users can only create three Projects in Neon. Projects created under Technical Preview Free Plan are subject to additional limits:

- Data size in the Project is limited to 10 GB;
- PITR time window is limited to 7 days of _reasonable usage_;
- Compute node can use up to 1vCPU/256 MB.

_Note: Technical Preview Free Plan limits are subject to change over the course of [Technical Preview](/docs/roadmap)._

## Branches (coming soon)

_Neon Branching capabilities are not publicly available yet. If you would like to try out this feature, reach out to beta@neon.tech describing your use case and request to enable branching capabilities for your account._

A branch is a copy of the [Project Data](#project) created from the current state or any past state that is still available (see [PITR](#point-in-time-reset)). A branch can be independently modified from its originating project data.

You can use a branch to:

- Run potentially destructive queries without impacting your main branch
- Run time travel queries against historical state
- Run a set of queries with separate resources to avoid impacting your application
- Tag and name the current moment, for PITR convenience or ML model training repeatability
- Run your tests against a branch from production data

_Note: The branch creation process does not increase load on the originating project. You can create a branch at any time without worrying about downtime or performance degradation._
