# Neon feature guides

> The "Neon feature guides" document details the functionalities and usage instructions for various features within the Neon database platform, aiding users in effectively utilizing Neon's capabilities.

## Source

- [Neon feature guides HTML](https://neon.com/docs/guides/neon-features): The original HTML version of this documentation

## Autoscaling

Automatically scale compute resources up and down based on demand.

- [Learn about autoscaling](https://neon.com/docs/introduction/autoscaling): Find out how autoscaling can reduce your costs.
- [Enable autoscaling](https://neon.com/docs/guides/autoscaling-guide): Enable autoscaling to automatically scale compute resources on demand

## Scale to zero

Enable or disable scale to zero for your Neon computes.

- [Learn about scale to zero](https://neon.com/docs/introduction/scale-to-zero): Discover how Neon can reduce your compute to zero when not in use
- [Configure scale to zero](https://neon.com/docs/guides/scale-to-zero-guide): Enable or disable scale to zero to control if your compute suspends due to inactivity

## Branching

Branch data the same way you branch your code.

- [Learn about branching](https://neon.com/docs/introduction/branching): With Neon, you can instantly branch your data in the same way that you branch your code
- [Instant restore](https://neon.com/docs/guides/branching-pitr): Restore your data to a past state with database branching
- [Test queries on a branch](https://neon.com/docs/guides/branching-test-queries): Use branching to test queries before running them in production
- [Branching with the CLI](https://neon.com/docs/guides/branching-neon-cli): Create and manage branches with the Neon CLI
- [Branching with the API](https://neon.com/docs/guides/branching-neon-api): Create and manage branches with the Neon API
- [Branching with GitHub Actions](https://neon.com/docs/guides/branching-github-actions): Automate branching with GitHub Actions
- [Refresh a branch](https://neon.com/docs/guides/branch-refresh): Refresh a development branch with the Neon API

## Logical replication

Replicate data from Neon to external data platforms and services.

- [Logical replication guide](https://neon.com/docs/guides/logical-replication-guide): Get started with logical replication in Neon
- [Logical replication concepts](https://neon.com/docs/guides/logical-replication-concepts): Learn about Postgres logical replication concepts
- [Logical replication commands](https://neon.com/docs/guides/logical-replication-manage): Commands for managing your logical replication configuration
- [Logical replication in Neon](https://neon.com/docs/guides/logical-replication-neon): Information about logical replication specific to Neon

## Read replicas

Learn how Neon read replicas can help you scale and manage read-only workloads.

- [Learn about read replicas](https://neon.com/docs/introduction/read-replicas): Learn how Neon maximizes scalability and more with read replicas
- [Create and manage Read Replicas](https://neon.com/docs/guides/read-replica-guide): Learn how to create, connect to, configure, delete, and monitor read replicas
- [Scale your app with Read Replicas](https://neon.com/docs/guides/read-replica-integrations): Scale your app with read replicas using built-in framework support
- [Run analytics queries with Read Replicas](https://neon.com/docs/guides/read-replica-data-analysis): Leverage read replicas for running data-intensive analytics queries
- [Run ad-hoc queries with Read Replicas](https://neon.com/docs/guides/read-replica-adhoc-queries): Leverage read replicas for running ad-hoc queries
- [Provide read-only access with Read Replicas](https://neon.com/docs/guides/read-only-access-read-replicas): Leverage read replicas to provide read-only access to your data

## Time Travel

Travel back in time to view your database's history.

- [Learn about Time Travel](https://neon.com/docs/guides/time-travel-assist): Learn how to query point-in-time connections against your data's history
- [Time Travel tutorial](https://neon.com/docs/guides/time-travel-tutorial): Use Time Travel to analyze changes made to your database over time

## Schema Diff

Compare your database branches.

- [Learn about Schema Diff](https://neon.com/docs/guides/schema-diff): Learn how to use Neon's Schema Diff tool to compare branches of your database
- [Schema Diff tutorial](https://neon.com/docs/guides/schema-diff-tutorial): Step-by-step guide showing you how to compare two development branches using Schema Diff

## Project collaboration

Invite other users to collaborate on your Neon project.

- [Collaborate on your Neon project](https://neon.com/docs/guides/project-collaboration-guide): Give other users access to your project from the Neon Console, API, and CLI

## IP Allow

Limit access to trusted IP addresses.

- [Define your IP allowlist](https://neon.com/docs/introduction/ip-allow): Learn how to limit database access to trusted IP addresses

## Protected branches

Protect your production or sensitive data.

- [Configure protected branches](https://neon.com/docs/guides/protected-branches): Learn how to use Neon's protected branches feature to secure access to critical data

## Private Networking

Secure your database connections with private access.

- [Private Networking](https://neon.com/docs/guides/neon-private-networking): Learn how to connect your application to a Neon database via AWS PrivateLink, bypassing the open internet
