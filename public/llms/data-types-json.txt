# Postgres JSON data types

> Postgres supports JSON and JSONB data types for storing semi-structured data, with JSONB offering better query performance through binary storage and indexing capabilities. These types are ideal for flexible schemas and document-like data typically found in NoSQL databases.

Postgres JSON data types provide a flexible way to store and manipulate semi-structured data that doesn't fit neatly into traditional relational models. This guide explains the differences between JSON and JSONB types, their storage characteristics, and how to effectively query and manipulate JSON data in Postgres.

## Source

- [Postgres JSON data types HTML](https://neon.com/docs/data-types/json): The original HTML version of this documentation

## Storage and syntax

### JSON

- The `JSON` data type stores `JSON` data in text format.
- It preserves an exact copy of the original `JSON` input, including whitespace and ordering of object keys.
- An advantage over storing `JSON` data in a `TEXT` column is that Postgres validates the `JSON` data at ingestion time, ensuring it is well-formed.

### JSONB

- The `JSONB` (JSON Binary) data type stores `JSON` data in a decomposed binary format.
- Unlike `JSON`, `JSONB` does not preserve whitespace or the order of object keys. For duplicate keys, only the last value is stored.
- `JSONB` is more efficient for querying, as it doesn't require re-parsing the `JSON` data every time it is accessed.

JSON values can be created from string literals by casting:

```sql
SELECT
    '{"name": "Alice", "age": 30}'::JSON as col_json,
    '[1, 2, "foo", null]'::JSONB as col_jsonb;
```

## Example usage

Consider the case of managing user profiles for a social media application. Profile data is semi-structured, with a set of fields common to all users, while other fields are optional and may vary across users. `JSONB` is a good fit for this use case:

```sql
CREATE TABLE user_profiles (
    id SERIAL PRIMARY KEY,
    profile JSONB NOT NULL
);

INSERT INTO user_profiles (profile)
VALUES
    ('{"name": "Alice", "age": 30, "interests": ["music", "travel"], "settings": {"privacy": "public", "notifications": true, "theme": "light"}}'),
    ('{"name": "Bob", "age": 25, "interests": ["photography", "cooking"], "settings": {"privacy": "private", "notifications": false}, "city": "NYC"}'),
    ('{"name": "Charlie", "interests": ["music", "cooking"], "settings": {"privacy": "private", "notifications": true, "language": "English"}}');
```

With `JSONB`, you can directly query and manipulate elements within the `JSON` structure:

```sql
SELECT
    id,
    profile -> 'name' as name,
    profile -> 'interests' as interests
FROM user_profiles
WHERE profile @> '{"interests":["music"]}'::JSONB;
```

The `@>` operator checks if the left `JSONB` operand contains the right `JSONB` operand as a subset, while the `->` operator extracts the value of a `JSON` key as a `JSON` value.

To extract values as text rather than JSON format, use the `->>` operator:

```sql
SELECT
    id,
    profile ->> 'name' as name
FROM user_profiles;
```

## JSON functions and operators

Postgres implements several functions and operators for querying and manipulating `JSON` data, including:

- `json_array_elements` / `jsonb_array_elements`: Expands a JSON array to a set of JSON values
- `json_build_object`: Builds a JSON object from key-value pairs
- `json_each`: Expands the outermost JSON object into a set of key-value pairs
- `json_extract_path`: Extracts JSON sub-object at the specified path
- `json_extract_path_text`: Extracts JSON sub-object at the specified path as text
- `json_object`: Builds a JSON object from a text array
- `json_populate_record`: Expands the object in from_json to a row
- `json_to_record`: Builds an arbitrary record from a JSON object

### Nested data

Postgres supports storing nested `JSON` values. For example, in the user profile table, the `settings` field is a `JSON` object itself. The nested values can be extracted by chaining the `->` operator:

```sql
SELECT
    id,
    profile -> 'name' as name,
    profile -> 'settings' ->> 'privacy' as privacy
FROM user_profiles;
```

### Modifying JSONB data

The `JSONB` type supports updating individual fields:

```sql
UPDATE user_profiles
SET profile = jsonb_set(profile, '{settings, privacy}', '"friends-only"')
WHERE profile -> 'settings' ->> 'privacy' = 'public';
```

`jsonb_set` is a Postgres function that takes a `JSONB` value, a path to the field to update, and the new value. The path is specified as an array of keys.

Field updates are not supported for the `JSON` type.

### Indexing JSONB data

Postgres supports GIN (Generalized Inverted Index) indexes for `JSONB` data, which can improve query performance significantly:

```sql
CREATE INDEX idxgin ON user_profiles USING GIN (profile);
```

This makes evaluation of `key-exists (?)` and `containment (@>)` operators efficient.

## Additional considerations

### JSON vs JSONB

`JSONB` is the recommended data type for storing `JSON` data in Postgres for a few reasons:

- **Indexing**: `JSONB` allows for the creation of GIN indexes, which makes searching within `JSONB` columns faster.
- **Performance**: `JSONB` binary format is more efficient for querying and manipulating, as it doesn't require re-parsing the `JSON` data for each access. It also supports in-place updates to individual fields.
- **Data integrity**: `JSONB` ensures that keys in an object are unique.

There might be some legacy use cases where preserving the exact format of the `JSON` data is important. In such cases, the `JSON` data type can be used.

## Resources

- [PostgreSQL documentation - JSON Types](https://www.postgresql.org/docs/current/datatype-json.html)
- [PostgreSQL documentation - JSON Functions and Operators](https://www.postgresql.org/docs/current/functions-json.html)
