# Postgres Decimal data types

> Postgres decimal data types (DECIMAL/NUMERIC) store numbers with arbitrary precision, making them ideal for financial applications and scientific computations where exact numerical representation is critical. Unlike floating-point types, they maintain precision and avoid rounding errors in calculations.

Postgres decimal data types provide exact numerical representation for applications requiring high precision. This guide explains how to use DECIMAL/NUMERIC types in Postgres, including syntax, storage considerations, and practical examples for financial and scientific use cases.

## Source

- [Postgres Decimal data types HTML](https://neon.com/docs/data-types/decimal): The original HTML version of this documentation

## Storage and syntax

Postgres provides a single decimal/numeric type referred to as `DECIMAL` or `NUMERIC`. It offers user-defined precision and can represent numbers exactly up to a certain number of digits.

The syntax for defining a decimal column is `DECIMAL(precision, scale)` or `NUMERIC(precision, scale)`, where:

- `precision` is the total count of significant digits in the number (both to the left and right of the decimal point).
- `scale` is the count of decimal digits in the fractional part.

Declaring a column as `NUMERIC` without specifying precision and scale, stores numbers of any precision exactly (up to the implementation limit).

Example of `NUMERIC` behavior:

```sql
SELECT 1234.56::NUMERIC(10, 4) AS num_A,
       1234.56::NUMERIC(10, 1) AS num_B,
       1234.56789::NUMERIC AS num_C;
```

The number `1234.56` is represented differently based on the specified precision and scale:
- `NUMERIC(10, 4)` rounds to 4 decimal places: 1234.5600
- `NUMERIC(10, 1)` rounds to 1 decimal place: 1234.6
- `NUMERIC` without parameters stores the exact value: 1234.56789

## Example usage

Consider a financial application managing user portfolios. Here, `DECIMAL` is ideal for storing currency values to avoid rounding errors:

```sql
CREATE TABLE portfolios (
    portfolio_id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    stock_symbol TEXT NOT NULL,
    shares_owned DECIMAL(10, 4),
    price_per_share DECIMAL(10, 2)
);

INSERT INTO portfolios (user_id, stock_symbol, shares_owned, price_per_share)
VALUES
    (101, 'AAPL', 150.1234, 145.67),
    (102, 'MSFT', 200.000, 214.53);
```

## Arithmetic operations

Postgres allows various arithmetic operations on decimal types. These operations maintain precision and are critical in contexts where rounding errors could be costly:

```sql
SELECT price_per_share * shares_owned AS total_value
FROM portfolios;
```

This query calculates the total value of each stock holding with precise decimal representation:
- 150.1234 × 145.67 = 21868.475678
- 200.000 × 214.53 = 42906.000000

## Differences from floating-point

It's important to differentiate `DECIMAL`/`NUMERIC` from floating-point types (`REAL`, `DOUBLE PRECISION`):

- **Precision**: `DECIMAL`/`NUMERIC` types maintain exact precision, while floating-point types are approximate and can introduce rounding errors.
- **Performance**: Operations on `DECIMAL`/`NUMERIC` types are generally slower than floating-point types due to the precision and complexity of calculations.

## Additional considerations

- **Range and Precision**: Always define `DECIMAL`/`NUMERIC` with an appropriate range and precision based on the application's requirements. Overestimating precision can lead to unnecessary storage and performance overhead.

## Resources

- [PostgreSQL documentation - Numeric Types](https://www.postgresql.org/docs/current/datatype-numeric.html)
