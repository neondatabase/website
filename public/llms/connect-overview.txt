# Connecting to Neon Postgres

This guide provides an overview of connecting to Neon Postgres from different clients and applications, troubleshooting connection issues, and optimizing your connections.

## Connection Methods

Neon supports multiple connection methods:

1. **Choose the right driver and connection type**
   - Neon Serverless driver (for JavaScript/TypeScript in serverless environments)
   - TCP-based drivers (for traditional applications)
   - Direct connections (for migrations and admin tasks)
   - Pooled connections (for high concurrency)

2. **Connect from clients and applications**
   - Connect from any application using connection strings
   - Use the Neon serverless driver for serverless environments
   - Connect from GUI applications like pgAdmin, DBeaver, etc.
   - Use psql, the native command-line client for Postgres

3. **Connect from frameworks and languages**
   - Various frameworks (Next.js, Node.js, Django, etc.)
   - Various languages (Python, JavaScript, Go, etc.)

## Troubleshooting Connections

Common connection issues and their solutions:

1. **Connection errors**
   - Authentication failures
   - Timeout issues
   - SSL/TLS problems
   - IP allow list restrictions

2. **Connection latency and timeouts**
   - Cold starts with auto-scaling
   - Connection pooling configuration
   - Regional proximity considerations

## Secure Connections

Ensure secure connections to your Neon database:

1. **SSL/TLS encrypted connections**
   - Always use SSL/TLS for secure connections
   - Set sslmode=require in your connection string
   - Verify server certificates for enhanced security

2. **Passwordless authentication**
   - Use Neon's psql passwordless auth feature
   - Generate temporary authentication tokens

## Connection Pooling

Optimize connections with pooling:

1. **Enable connection pooling**
   - Support up to 10,000 concurrent connections
   - Use the -pooler suffix in your connection string
   - Configure pool size based on your workload

2. **Connection pooling with frameworks**
   - Prisma connection pooling
   - Other framework-specific pooling strategies

For detailed instructions on specific connection methods, refer to the Neon documentation.
