# Connect Micronaut Kotlin to Postgres on Neon

[Micronaut](https://micronaut.io/) is a modern, JVM-based, full-stack framework for building modular, easily testable microservice and serverless applications. This guide describes how to create a Neon Postgres database and connect to it from a Micronaut Kotlin application.

To create a Neon project and access it from a Micronaut Kotlin application:

1. Create a Neon project
2. Create a Micronaut Kotlin project and add dependencies
3. Configure the Postgres connection
4. Run the application

## Create a Neon project

If you do not have one already, create a Neon project. Save your connection details including your password. They are required when defining connection settings.

1. Navigate to the [Projects](https://console.neon.tech/app/projects) page in the Neon Console.
2. Click **New Project**.
3. Specify your project settings and click **Create Project**.

## Create a Micronaut Kotlin project and add dependencies

1. Create a Micronaut Kotlin project using the Micronaut CLI or the [Micronaut Launch](https://launch.micronaut.io/) website. Select Kotlin as the language and include the following features:
   - postgres
   - jdbc-hikari

   ```bash
   # Using Micronaut CLI
   mn create-app my-micronaut-app --lang=kotlin --features=postgres,jdbc-hikari
   ```

2. If you created your project without these dependencies, you can add them manually to your `build.gradle.kts` file:

   ```kotlin
   dependencies {
       // Existing dependencies...
       implementation("io.micronaut.sql:micronaut-jdbc-hikari")
       implementation("io.micronaut.data:micronaut-data-jdbc")
       implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
       implementation("org.postgresql:postgresql")
       // Other dependencies...
   }
   ```

## Store your Neon credentials

Add an `application.yml` file to your project at `src/main/resources/application.yml` and configure your Neon database connection:

```yaml
micronaut:
  application:
    name: mymicronautapp
  
datasources:
  default:
    url: ${JDBC_DATABASE_URL:`postgresql://[user]:[password]@[endpoint].neon.tech:5432/[dbname]?sslmode=require`}
    driverClassName: org.postgresql.Driver
    username: ${JDBC_DATABASE_USERNAME:`[user]`}
    password: ${JDBC_DATABASE_PASSWORD:`[password]`}
    dialect: POSTGRES
```

For local development, you can create a `.env` file at the root of your project with your actual Neon credentials.

## Configure the Postgres connection

Create entity classes, repositories, and controllers to interact with your Neon database. Here's a simple example using a Book entity:

```kotlin
// Entity
@MappedEntity
data class Book(
    @field:Id
    @field:GeneratedValue
    var id: Long? = null,
    var title: String,
    var author: String
)

// Repository
@JdbcRepository(dialect = Dialect.POSTGRES)
interface BookRepository : CrudRepository<Book, Long> {
    fun findByTitleContains(title: String): List<Book>
}

// Controller
@Controller("/books")
class BookController(private val bookRepository: BookRepository) {
    @Get
    fun getAll(): List<Book> {
        return bookRepository.findAll().toList()
    }
    
    @Post
    fun save(@Body book: Book): Book {
        return bookRepository.save(book)
    }
}
```

## Run the application

Run your Micronaut application using Gradle:

```bash
./gradlew run
```

You can test the API using curl:

```bash
# Get all books
curl http://localhost:8080/books

# Create a new book
curl -X POST -H "Content-Type: application/json" -d '{"title":"The Great Gatsby","author":"F. Scott Fitzgerald"}' http://localhost:8080/books
```

## Source code

You can find the source code for the applications described in this guide on GitHub:
- [Get started with Micronaut Kotlin and Neon](https://github.com/neondatabase/examples/tree/main/with-micronaut-kotlin)
